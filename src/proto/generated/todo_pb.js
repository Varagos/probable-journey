// source: todo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.todo.AddTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.AddTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.AddTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.AddTodoRequest', null, global);
goog.exportSymbol('proto.todo.AddTodoResponse', null, global);
goog.exportSymbol('proto.todo.AddTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.CompleteTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.CompleteTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.CompleteTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.CompleteTodoRequest', null, global);
goog.exportSymbol('proto.todo.CompleteTodoResponse', null, global);
goog.exportSymbol('proto.todo.CompleteTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.ErrorResponse', null, global);
goog.exportSymbol('proto.todo.GetAllMyTodosErrorResponse', null, global);
goog.exportSymbol('proto.todo.GetAllMyTodosErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.GetAllMyTodosOKResponse', null, global);
goog.exportSymbol('proto.todo.GetAllMyTodosRequest', null, global);
goog.exportSymbol('proto.todo.GetAllMyTodosResponse', null, global);
goog.exportSymbol('proto.todo.GetAllMyTodosResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.ModifyTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.ModifyTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.ModifyTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.ModifyTodoRequest', null, global);
goog.exportSymbol('proto.todo.ModifyTodoResponse', null, global);
goog.exportSymbol('proto.todo.ModifyTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.todo.Todo', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoErrorResponse', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoOKResponse', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoRequest', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoResponse', null, global);
goog.exportSymbol('proto.todo.UncompleteTodoResponse.ResultCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ErrorResponse.displayName = 'proto.todo.ErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.AddTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoRequest.displayName = 'proto.todo.AddTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.AddTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.AddTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoResponse.displayName = 'proto.todo.AddTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.AddTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.AddTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoErrorResponse.displayName = 'proto.todo.AddTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.AddTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.AddTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.AddTodoOKResponse.displayName = 'proto.todo.AddTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.CompleteTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoRequest.displayName = 'proto.todo.CompleteTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.CompleteTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.CompleteTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoResponse.displayName = 'proto.todo.CompleteTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.CompleteTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.CompleteTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoErrorResponse.displayName = 'proto.todo.CompleteTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.CompleteTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.CompleteTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.CompleteTodoOKResponse.displayName = 'proto.todo.CompleteTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllMyTodosRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.GetAllMyTodosRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllMyTodosRequest.displayName = 'proto.todo.GetAllMyTodosRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllMyTodosResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.GetAllMyTodosResponse.oneofGroups_);
};
goog.inherits(proto.todo.GetAllMyTodosResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllMyTodosResponse.displayName = 'proto.todo.GetAllMyTodosResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllMyTodosErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.GetAllMyTodosErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.GetAllMyTodosErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllMyTodosErrorResponse.displayName = 'proto.todo.GetAllMyTodosErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.GetAllMyTodosOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.todo.GetAllMyTodosOKResponse.repeatedFields_, null);
};
goog.inherits(proto.todo.GetAllMyTodosOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.GetAllMyTodosOKResponse.displayName = 'proto.todo.GetAllMyTodosOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.ModifyTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTodoRequest.displayName = 'proto.todo.ModifyTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.ModifyTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.ModifyTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTodoResponse.displayName = 'proto.todo.ModifyTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.ModifyTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.ModifyTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTodoErrorResponse.displayName = 'proto.todo.ModifyTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.ModifyTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.ModifyTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.ModifyTodoOKResponse.displayName = 'proto.todo.ModifyTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.UncompleteTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoRequest.displayName = 'proto.todo.UncompleteTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.UncompleteTodoResponse.oneofGroups_);
};
goog.inherits(proto.todo.UncompleteTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoResponse.displayName = 'proto.todo.UncompleteTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.todo.UncompleteTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.todo.UncompleteTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoErrorResponse.displayName = 'proto.todo.UncompleteTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.UncompleteTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.UncompleteTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.UncompleteTodoOKResponse.displayName = 'proto.todo.UncompleteTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.todo.Todo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.todo.Todo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.todo.Todo.displayName = 'proto.todo.Todo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ErrorResponse}
 */
proto.todo.ErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ErrorResponse;
  return proto.todo.ErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ErrorResponse}
 */
proto.todo.ErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.todo.ErrorResponse.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ErrorResponse} returns this
 */
proto.todo.ErrorResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.todo.ErrorResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ErrorResponse} returns this
 */
proto.todo.ErrorResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoRequest}
 */
proto.todo.AddTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoRequest;
  return proto.todo.AddTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoRequest}
 */
proto.todo.AddTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.todo.AddTodoRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.AddTodoRequest} returns this
 */
proto.todo.AddTodoRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.AddTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.AddTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.AddTodoResponse.ResultCase}
 */
proto.todo.AddTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.AddTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.AddTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.AddTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.AddTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoResponse}
 */
proto.todo.AddTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoResponse;
  return proto.todo.AddTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoResponse}
 */
proto.todo.AddTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.AddTodoOKResponse;
      reader.readMessage(value,proto.todo.AddTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.AddTodoErrorResponse;
      reader.readMessage(value,proto.todo.AddTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.AddTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.AddTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional AddTodoOKResponse ok = 1;
 * @return {?proto.todo.AddTodoOKResponse}
 */
proto.todo.AddTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.AddTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.AddTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.AddTodoOKResponse|undefined} value
 * @return {!proto.todo.AddTodoResponse} returns this
*/
proto.todo.AddTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.AddTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoResponse} returns this
 */
proto.todo.AddTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AddTodoErrorResponse error = 2;
 * @return {?proto.todo.AddTodoErrorResponse}
 */
proto.todo.AddTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.AddTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.AddTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.AddTodoErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoResponse} returns this
*/
proto.todo.AddTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.AddTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoResponse} returns this
 */
proto.todo.AddTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.AddTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.todo.AddTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  INVALIDTITLELENGTHERROR: 3
};

/**
 * @return {proto.todo.AddTodoErrorResponse.ErrorCase}
 */
proto.todo.AddTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.AddTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.AddTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    invalidtitlelengtherror: (f = msg.getInvalidtitlelengtherror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoErrorResponse}
 */
proto.todo.AddTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoErrorResponse;
  return proto.todo.AddTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoErrorResponse}
 */
proto.todo.AddTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setInvalidtitlelengtherror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getInvalidtitlelengtherror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.AddTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoErrorResponse} returns this
*/
proto.todo.AddTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoErrorResponse} returns this
 */
proto.todo.AddTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.AddTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoErrorResponse} returns this
*/
proto.todo.AddTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoErrorResponse} returns this
 */
proto.todo.AddTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse invalidTitleLengthError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.AddTodoErrorResponse.prototype.getInvalidtitlelengtherror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.AddTodoErrorResponse} returns this
*/
proto.todo.AddTodoErrorResponse.prototype.setInvalidtitlelengtherror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.AddTodoErrorResponse} returns this
 */
proto.todo.AddTodoErrorResponse.prototype.clearInvalidtitlelengtherror = function() {
  return this.setInvalidtitlelengtherror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.AddTodoErrorResponse.prototype.hasInvalidtitlelengtherror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.AddTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.AddTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.AddTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.AddTodoOKResponse}
 */
proto.todo.AddTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.AddTodoOKResponse;
  return proto.todo.AddTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.AddTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.AddTodoOKResponse}
 */
proto.todo.AddTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.AddTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.AddTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.AddTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.AddTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.AddTodoOKResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.AddTodoOKResponse} returns this
 */
proto.todo.AddTodoOKResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoRequest}
 */
proto.todo.CompleteTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoRequest;
  return proto.todo.CompleteTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoRequest}
 */
proto.todo.CompleteTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.CompleteTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.CompleteTodoRequest} returns this
 */
proto.todo.CompleteTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.CompleteTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.CompleteTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.CompleteTodoResponse.ResultCase}
 */
proto.todo.CompleteTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.CompleteTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.CompleteTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.CompleteTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.CompleteTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoResponse}
 */
proto.todo.CompleteTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoResponse;
  return proto.todo.CompleteTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoResponse}
 */
proto.todo.CompleteTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.CompleteTodoOKResponse;
      reader.readMessage(value,proto.todo.CompleteTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.CompleteTodoErrorResponse;
      reader.readMessage(value,proto.todo.CompleteTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.CompleteTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.CompleteTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompleteTodoOKResponse ok = 1;
 * @return {?proto.todo.CompleteTodoOKResponse}
 */
proto.todo.CompleteTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.CompleteTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.CompleteTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.CompleteTodoOKResponse|undefined} value
 * @return {!proto.todo.CompleteTodoResponse} returns this
*/
proto.todo.CompleteTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.CompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoResponse} returns this
 */
proto.todo.CompleteTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompleteTodoErrorResponse error = 2;
 * @return {?proto.todo.CompleteTodoErrorResponse}
 */
proto.todo.CompleteTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.CompleteTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.CompleteTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.CompleteTodoErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoResponse} returns this
*/
proto.todo.CompleteTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.CompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoResponse} returns this
 */
proto.todo.CompleteTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.CompleteTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.todo.CompleteTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  TODOALREADYEXISTSERROR: 3
};

/**
 * @return {proto.todo.CompleteTodoErrorResponse.ErrorCase}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.CompleteTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    todoalreadyexistserror: (f = msg.getTodoalreadyexistserror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoErrorResponse;
  return proto.todo.CompleteTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTodoalreadyexistserror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTodoalreadyexistserror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
*/
proto.todo.CompleteTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
 */
proto.todo.CompleteTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
*/
proto.todo.CompleteTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
 */
proto.todo.CompleteTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse todoAlreadyExistsError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.CompleteTodoErrorResponse.prototype.getTodoalreadyexistserror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
*/
proto.todo.CompleteTodoErrorResponse.prototype.setTodoalreadyexistserror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.CompleteTodoErrorResponse} returns this
 */
proto.todo.CompleteTodoErrorResponse.prototype.clearTodoalreadyexistserror = function() {
  return this.setTodoalreadyexistserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.CompleteTodoErrorResponse.prototype.hasTodoalreadyexistserror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.CompleteTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.CompleteTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.CompleteTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.CompleteTodoOKResponse}
 */
proto.todo.CompleteTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.CompleteTodoOKResponse;
  return proto.todo.CompleteTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.CompleteTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.CompleteTodoOKResponse}
 */
proto.todo.CompleteTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.CompleteTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.CompleteTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.CompleteTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.CompleteTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllMyTodosRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllMyTodosRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllMyTodosRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllMyTodosRequest}
 */
proto.todo.GetAllMyTodosRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllMyTodosRequest;
  return proto.todo.GetAllMyTodosRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllMyTodosRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllMyTodosRequest}
 */
proto.todo.GetAllMyTodosRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllMyTodosRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllMyTodosRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllMyTodosRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.GetAllMyTodosResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.GetAllMyTodosResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.GetAllMyTodosResponse.ResultCase}
 */
proto.todo.GetAllMyTodosResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.GetAllMyTodosResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.GetAllMyTodosResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllMyTodosResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllMyTodosResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllMyTodosResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.GetAllMyTodosOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.GetAllMyTodosErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllMyTodosResponse}
 */
proto.todo.GetAllMyTodosResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllMyTodosResponse;
  return proto.todo.GetAllMyTodosResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllMyTodosResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllMyTodosResponse}
 */
proto.todo.GetAllMyTodosResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.GetAllMyTodosOKResponse;
      reader.readMessage(value,proto.todo.GetAllMyTodosOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.GetAllMyTodosErrorResponse;
      reader.readMessage(value,proto.todo.GetAllMyTodosErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllMyTodosResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllMyTodosResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllMyTodosResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.GetAllMyTodosOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.GetAllMyTodosErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetAllMyTodosOKResponse ok = 1;
 * @return {?proto.todo.GetAllMyTodosOKResponse}
 */
proto.todo.GetAllMyTodosResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.GetAllMyTodosOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.GetAllMyTodosOKResponse, 1));
};


/**
 * @param {?proto.todo.GetAllMyTodosOKResponse|undefined} value
 * @return {!proto.todo.GetAllMyTodosResponse} returns this
*/
proto.todo.GetAllMyTodosResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.GetAllMyTodosResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllMyTodosResponse} returns this
 */
proto.todo.GetAllMyTodosResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllMyTodosResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetAllMyTodosErrorResponse error = 2;
 * @return {?proto.todo.GetAllMyTodosErrorResponse}
 */
proto.todo.GetAllMyTodosResponse.prototype.getError = function() {
  return /** @type{?proto.todo.GetAllMyTodosErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.GetAllMyTodosErrorResponse, 2));
};


/**
 * @param {?proto.todo.GetAllMyTodosErrorResponse|undefined} value
 * @return {!proto.todo.GetAllMyTodosResponse} returns this
*/
proto.todo.GetAllMyTodosResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.GetAllMyTodosResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllMyTodosResponse} returns this
 */
proto.todo.GetAllMyTodosResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllMyTodosResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.GetAllMyTodosErrorResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.GetAllMyTodosErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2
};

/**
 * @return {proto.todo.GetAllMyTodosErrorResponse.ErrorCase}
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.GetAllMyTodosErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.GetAllMyTodosErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllMyTodosErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllMyTodosErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllMyTodosErrorResponse}
 */
proto.todo.GetAllMyTodosErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllMyTodosErrorResponse;
  return proto.todo.GetAllMyTodosErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllMyTodosErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllMyTodosErrorResponse}
 */
proto.todo.GetAllMyTodosErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllMyTodosErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllMyTodosErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.GetAllMyTodosErrorResponse} returns this
*/
proto.todo.GetAllMyTodosErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.GetAllMyTodosErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllMyTodosErrorResponse} returns this
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.GetAllMyTodosErrorResponse} returns this
*/
proto.todo.GetAllMyTodosErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.GetAllMyTodosErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.GetAllMyTodosErrorResponse} returns this
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.GetAllMyTodosErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.todo.GetAllMyTodosOKResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.GetAllMyTodosOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.GetAllMyTodosOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.GetAllMyTodosOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todosList: jspb.Message.toObjectList(msg.getTodosList(),
    proto.todo.Todo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.GetAllMyTodosOKResponse}
 */
proto.todo.GetAllMyTodosOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.GetAllMyTodosOKResponse;
  return proto.todo.GetAllMyTodosOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.GetAllMyTodosOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.GetAllMyTodosOKResponse}
 */
proto.todo.GetAllMyTodosOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.Todo;
      reader.readMessage(value,proto.todo.Todo.deserializeBinaryFromReader);
      msg.addTodos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.GetAllMyTodosOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.GetAllMyTodosOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.GetAllMyTodosOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.GetAllMyTodosOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.todo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Todo todos = 1;
 * @return {!Array<!proto.todo.Todo>}
 */
proto.todo.GetAllMyTodosOKResponse.prototype.getTodosList = function() {
  return /** @type{!Array<!proto.todo.Todo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.todo.Todo, 1));
};


/**
 * @param {!Array<!proto.todo.Todo>} value
 * @return {!proto.todo.GetAllMyTodosOKResponse} returns this
*/
proto.todo.GetAllMyTodosOKResponse.prototype.setTodosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.todo.Todo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.todo.Todo}
 */
proto.todo.GetAllMyTodosOKResponse.prototype.addTodos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.todo.Todo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.todo.GetAllMyTodosOKResponse} returns this
 */
proto.todo.GetAllMyTodosOKResponse.prototype.clearTodosList = function() {
  return this.setTodosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTodoRequest}
 */
proto.todo.ModifyTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTodoRequest;
  return proto.todo.ModifyTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTodoRequest}
 */
proto.todo.ModifyTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.ModifyTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ModifyTodoRequest} returns this
 */
proto.todo.ModifyTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.todo.ModifyTodoRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.ModifyTodoRequest} returns this
 */
proto.todo.ModifyTodoRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.ModifyTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.ModifyTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.ModifyTodoResponse.ResultCase}
 */
proto.todo.ModifyTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.ModifyTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.ModifyTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.ModifyTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.ModifyTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTodoResponse}
 */
proto.todo.ModifyTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTodoResponse;
  return proto.todo.ModifyTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTodoResponse}
 */
proto.todo.ModifyTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ModifyTodoOKResponse;
      reader.readMessage(value,proto.todo.ModifyTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.ModifyTodoErrorResponse;
      reader.readMessage(value,proto.todo.ModifyTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ModifyTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ModifyTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ModifyTodoOKResponse ok = 1;
 * @return {?proto.todo.ModifyTodoOKResponse}
 */
proto.todo.ModifyTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.ModifyTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ModifyTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.ModifyTodoOKResponse|undefined} value
 * @return {!proto.todo.ModifyTodoResponse} returns this
*/
proto.todo.ModifyTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.ModifyTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTodoResponse} returns this
 */
proto.todo.ModifyTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ModifyTodoErrorResponse error = 2;
 * @return {?proto.todo.ModifyTodoErrorResponse}
 */
proto.todo.ModifyTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.ModifyTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ModifyTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.ModifyTodoErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTodoResponse} returns this
*/
proto.todo.ModifyTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.ModifyTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTodoResponse} returns this
 */
proto.todo.ModifyTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.ModifyTodoErrorResponse.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.todo.ModifyTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  TODODOESNOTEXISTERROR: 3,
  INVALIDTITLELENGTHERROR: 4
};

/**
 * @return {proto.todo.ModifyTodoErrorResponse.ErrorCase}
 */
proto.todo.ModifyTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.ModifyTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.ModifyTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    tododoesnotexisterror: (f = msg.getTododoesnotexisterror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    invalidtitlelengtherror: (f = msg.getInvalidtitlelengtherror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTodoErrorResponse}
 */
proto.todo.ModifyTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTodoErrorResponse;
  return proto.todo.ModifyTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTodoErrorResponse}
 */
proto.todo.ModifyTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTododoesnotexisterror(value);
      break;
    case 4:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setInvalidtitlelengtherror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTododoesnotexisterror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getInvalidtitlelengtherror();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
*/
proto.todo.ModifyTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.ModifyTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
 */
proto.todo.ModifyTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
*/
proto.todo.ModifyTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.ModifyTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
 */
proto.todo.ModifyTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse todoDoesNotExistError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTodoErrorResponse.prototype.getTododoesnotexisterror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
*/
proto.todo.ModifyTodoErrorResponse.prototype.setTododoesnotexisterror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.ModifyTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
 */
proto.todo.ModifyTodoErrorResponse.prototype.clearTododoesnotexisterror = function() {
  return this.setTododoesnotexisterror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTodoErrorResponse.prototype.hasTododoesnotexisterror = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ErrorResponse invalidTitleLengthError = 4;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.ModifyTodoErrorResponse.prototype.getInvalidtitlelengtherror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 4));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
*/
proto.todo.ModifyTodoErrorResponse.prototype.setInvalidtitlelengtherror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.todo.ModifyTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.ModifyTodoErrorResponse} returns this
 */
proto.todo.ModifyTodoErrorResponse.prototype.clearInvalidtitlelengtherror = function() {
  return this.setInvalidtitlelengtherror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.ModifyTodoErrorResponse.prototype.hasInvalidtitlelengtherror = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.ModifyTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.ModifyTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.ModifyTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.ModifyTodoOKResponse}
 */
proto.todo.ModifyTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.ModifyTodoOKResponse;
  return proto.todo.ModifyTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.ModifyTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.ModifyTodoOKResponse}
 */
proto.todo.ModifyTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.ModifyTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.ModifyTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.ModifyTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.ModifyTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoRequest}
 */
proto.todo.UncompleteTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoRequest;
  return proto.todo.UncompleteTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoRequest}
 */
proto.todo.UncompleteTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.UncompleteTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.UncompleteTodoRequest} returns this
 */
proto.todo.UncompleteTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.UncompleteTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.todo.UncompleteTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.todo.UncompleteTodoResponse.ResultCase}
 */
proto.todo.UncompleteTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.todo.UncompleteTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.todo.UncompleteTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.todo.UncompleteTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.todo.UncompleteTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoResponse}
 */
proto.todo.UncompleteTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoResponse;
  return proto.todo.UncompleteTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoResponse}
 */
proto.todo.UncompleteTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.UncompleteTodoOKResponse;
      reader.readMessage(value,proto.todo.UncompleteTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.todo.UncompleteTodoErrorResponse;
      reader.readMessage(value,proto.todo.UncompleteTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.UncompleteTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.UncompleteTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional UncompleteTodoOKResponse ok = 1;
 * @return {?proto.todo.UncompleteTodoOKResponse}
 */
proto.todo.UncompleteTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.todo.UncompleteTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.UncompleteTodoOKResponse, 1));
};


/**
 * @param {?proto.todo.UncompleteTodoOKResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoResponse} returns this
*/
proto.todo.UncompleteTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.UncompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoResponse} returns this
 */
proto.todo.UncompleteTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UncompleteTodoErrorResponse error = 2;
 * @return {?proto.todo.UncompleteTodoErrorResponse}
 */
proto.todo.UncompleteTodoResponse.prototype.getError = function() {
  return /** @type{?proto.todo.UncompleteTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.UncompleteTodoErrorResponse, 2));
};


/**
 * @param {?proto.todo.UncompleteTodoErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoResponse} returns this
*/
proto.todo.UncompleteTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.UncompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoResponse} returns this
 */
proto.todo.UncompleteTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.todo.UncompleteTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.todo.UncompleteTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2,
  TODOALREADYEXISTSERROR: 3
};

/**
 * @return {proto.todo.UncompleteTodoErrorResponse.ErrorCase}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.todo.UncompleteTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.todo.ErrorResponse.toObject(includeInstance, f),
    todoalreadyexistserror: (f = msg.getTodoalreadyexistserror()) && proto.todo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoErrorResponse;
  return proto.todo.UncompleteTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    case 3:
      var value = new proto.todo.ErrorResponse;
      reader.readMessage(value,proto.todo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTodoalreadyexistserror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTodoalreadyexistserror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.todo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 1));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
*/
proto.todo.UncompleteTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
 */
proto.todo.UncompleteTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 2));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
*/
proto.todo.UncompleteTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
 */
proto.todo.UncompleteTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse todoAlreadyExistsError = 3;
 * @return {?proto.todo.ErrorResponse}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.getTodoalreadyexistserror = function() {
  return /** @type{?proto.todo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.todo.ErrorResponse, 3));
};


/**
 * @param {?proto.todo.ErrorResponse|undefined} value
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
*/
proto.todo.UncompleteTodoErrorResponse.prototype.setTodoalreadyexistserror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.todo.UncompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.todo.UncompleteTodoErrorResponse} returns this
 */
proto.todo.UncompleteTodoErrorResponse.prototype.clearTodoalreadyexistserror = function() {
  return this.setTodoalreadyexistserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.todo.UncompleteTodoErrorResponse.prototype.hasTodoalreadyexistserror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.UncompleteTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.UncompleteTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.UncompleteTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.UncompleteTodoOKResponse}
 */
proto.todo.UncompleteTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.UncompleteTodoOKResponse;
  return proto.todo.UncompleteTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.UncompleteTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.UncompleteTodoOKResponse}
 */
proto.todo.UncompleteTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.UncompleteTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.UncompleteTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.UncompleteTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.UncompleteTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.todo.Todo.prototype.toObject = function(opt_includeInstance) {
  return proto.todo.Todo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.todo.Todo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Todo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    completed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.todo.Todo}
 */
proto.todo.Todo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.todo.Todo;
  return proto.todo.Todo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.todo.Todo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.todo.Todo}
 */
proto.todo.Todo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.todo.Todo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.todo.Todo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.todo.Todo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.todo.Todo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.todo.Todo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.Todo} returns this
 */
proto.todo.Todo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.todo.Todo.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.todo.Todo} returns this
 */
proto.todo.Todo.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool completed = 3;
 * @return {boolean}
 */
proto.todo.Todo.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.todo.Todo} returns this
 */
proto.todo.Todo.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.todo);

// source: newtodo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.newtodo.AddTodoErrorResponse', null, global);
goog.exportSymbol('proto.newtodo.AddTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.newtodo.AddTodoOKResponse', null, global);
goog.exportSymbol('proto.newtodo.AddTodoRequest', null, global);
goog.exportSymbol('proto.newtodo.AddTodoResponse', null, global);
goog.exportSymbol('proto.newtodo.AddTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.newtodo.CompleteTodoErrorResponse', null, global);
goog.exportSymbol('proto.newtodo.CompleteTodoErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.newtodo.CompleteTodoOKResponse', null, global);
goog.exportSymbol('proto.newtodo.CompleteTodoRequest', null, global);
goog.exportSymbol('proto.newtodo.CompleteTodoResponse', null, global);
goog.exportSymbol('proto.newtodo.CompleteTodoResponse.ResultCase', null, global);
goog.exportSymbol('proto.newtodo.ErrorResponse', null, global);
goog.exportSymbol('proto.newtodo.GetAllMyTodosErrorResponse', null, global);
goog.exportSymbol('proto.newtodo.GetAllMyTodosErrorResponse.ErrorCase', null, global);
goog.exportSymbol('proto.newtodo.GetAllMyTodosOKResponse', null, global);
goog.exportSymbol('proto.newtodo.GetAllMyTodosRequest', null, global);
goog.exportSymbol('proto.newtodo.GetAllMyTodosResponse', null, global);
goog.exportSymbol('proto.newtodo.GetAllMyTodosResponse.ResultCase', null, global);
goog.exportSymbol('proto.newtodo.Todo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.ErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newtodo.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.ErrorResponse.displayName = 'proto.newtodo.ErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.AddTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newtodo.AddTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.AddTodoRequest.displayName = 'proto.newtodo.AddTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.AddTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.newtodo.AddTodoResponse.oneofGroups_);
};
goog.inherits(proto.newtodo.AddTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.AddTodoResponse.displayName = 'proto.newtodo.AddTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.AddTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.newtodo.AddTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.newtodo.AddTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.AddTodoErrorResponse.displayName = 'proto.newtodo.AddTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.AddTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newtodo.AddTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.AddTodoOKResponse.displayName = 'proto.newtodo.AddTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.CompleteTodoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newtodo.CompleteTodoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.CompleteTodoRequest.displayName = 'proto.newtodo.CompleteTodoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.CompleteTodoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.newtodo.CompleteTodoResponse.oneofGroups_);
};
goog.inherits(proto.newtodo.CompleteTodoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.CompleteTodoResponse.displayName = 'proto.newtodo.CompleteTodoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.CompleteTodoErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.newtodo.CompleteTodoErrorResponse.oneofGroups_);
};
goog.inherits(proto.newtodo.CompleteTodoErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.CompleteTodoErrorResponse.displayName = 'proto.newtodo.CompleteTodoErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.CompleteTodoOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newtodo.CompleteTodoOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.CompleteTodoOKResponse.displayName = 'proto.newtodo.CompleteTodoOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.GetAllMyTodosRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newtodo.GetAllMyTodosRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.GetAllMyTodosRequest.displayName = 'proto.newtodo.GetAllMyTodosRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.GetAllMyTodosResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.newtodo.GetAllMyTodosResponse.oneofGroups_);
};
goog.inherits(proto.newtodo.GetAllMyTodosResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.GetAllMyTodosResponse.displayName = 'proto.newtodo.GetAllMyTodosResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.GetAllMyTodosErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.newtodo.GetAllMyTodosErrorResponse.oneofGroups_);
};
goog.inherits(proto.newtodo.GetAllMyTodosErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.GetAllMyTodosErrorResponse.displayName = 'proto.newtodo.GetAllMyTodosErrorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.GetAllMyTodosOKResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.newtodo.GetAllMyTodosOKResponse.repeatedFields_, null);
};
goog.inherits(proto.newtodo.GetAllMyTodosOKResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.GetAllMyTodosOKResponse.displayName = 'proto.newtodo.GetAllMyTodosOKResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.newtodo.Todo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.newtodo.Todo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.newtodo.Todo.displayName = 'proto.newtodo.Todo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.ErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.ErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.ErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.ErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.ErrorResponse}
 */
proto.newtodo.ErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.ErrorResponse;
  return proto.newtodo.ErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.ErrorResponse}
 */
proto.newtodo.ErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.ErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.ErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.ErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.newtodo.ErrorResponse.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.newtodo.ErrorResponse} returns this
 */
proto.newtodo.ErrorResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.newtodo.ErrorResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.newtodo.ErrorResponse} returns this
 */
proto.newtodo.ErrorResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.AddTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.AddTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.AddTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.AddTodoRequest}
 */
proto.newtodo.AddTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.AddTodoRequest;
  return proto.newtodo.AddTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.AddTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.AddTodoRequest}
 */
proto.newtodo.AddTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.AddTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.AddTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.AddTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.newtodo.AddTodoRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.newtodo.AddTodoRequest} returns this
 */
proto.newtodo.AddTodoRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.newtodo.AddTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.newtodo.AddTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.newtodo.AddTodoResponse.ResultCase}
 */
proto.newtodo.AddTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.newtodo.AddTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.newtodo.AddTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.AddTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.AddTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.AddTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.newtodo.AddTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.newtodo.AddTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.AddTodoResponse}
 */
proto.newtodo.AddTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.AddTodoResponse;
  return proto.newtodo.AddTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.AddTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.AddTodoResponse}
 */
proto.newtodo.AddTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newtodo.AddTodoOKResponse;
      reader.readMessage(value,proto.newtodo.AddTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.newtodo.AddTodoErrorResponse;
      reader.readMessage(value,proto.newtodo.AddTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.AddTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.AddTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.AddTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.newtodo.AddTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.newtodo.AddTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional AddTodoOKResponse ok = 1;
 * @return {?proto.newtodo.AddTodoOKResponse}
 */
proto.newtodo.AddTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.newtodo.AddTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.AddTodoOKResponse, 1));
};


/**
 * @param {?proto.newtodo.AddTodoOKResponse|undefined} value
 * @return {!proto.newtodo.AddTodoResponse} returns this
*/
proto.newtodo.AddTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.newtodo.AddTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.AddTodoResponse} returns this
 */
proto.newtodo.AddTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.AddTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AddTodoErrorResponse error = 2;
 * @return {?proto.newtodo.AddTodoErrorResponse}
 */
proto.newtodo.AddTodoResponse.prototype.getError = function() {
  return /** @type{?proto.newtodo.AddTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.AddTodoErrorResponse, 2));
};


/**
 * @param {?proto.newtodo.AddTodoErrorResponse|undefined} value
 * @return {!proto.newtodo.AddTodoResponse} returns this
*/
proto.newtodo.AddTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.newtodo.AddTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.AddTodoResponse} returns this
 */
proto.newtodo.AddTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.AddTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.newtodo.AddTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.newtodo.AddTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  INVALIDTITLELENGTHERROR: 2,
  SYSTEMUNAVAILABLEERROR: 3
};

/**
 * @return {proto.newtodo.AddTodoErrorResponse.ErrorCase}
 */
proto.newtodo.AddTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.newtodo.AddTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.newtodo.AddTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.AddTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.AddTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.AddTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f),
    invalidtitlelengtherror: (f = msg.getInvalidtitlelengtherror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.AddTodoErrorResponse}
 */
proto.newtodo.AddTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.AddTodoErrorResponse;
  return proto.newtodo.AddTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.AddTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.AddTodoErrorResponse}
 */
proto.newtodo.AddTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setInvalidtitlelengtherror(value);
      break;
    case 3:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.AddTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.AddTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.AddTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getInvalidtitlelengtherror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.AddTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 1));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.AddTodoErrorResponse} returns this
*/
proto.newtodo.AddTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.newtodo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.AddTodoErrorResponse} returns this
 */
proto.newtodo.AddTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.AddTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse invalidTitleLengthError = 2;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.AddTodoErrorResponse.prototype.getInvalidtitlelengtherror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 2));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.AddTodoErrorResponse} returns this
*/
proto.newtodo.AddTodoErrorResponse.prototype.setInvalidtitlelengtherror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.newtodo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.AddTodoErrorResponse} returns this
 */
proto.newtodo.AddTodoErrorResponse.prototype.clearInvalidtitlelengtherror = function() {
  return this.setInvalidtitlelengtherror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.AddTodoErrorResponse.prototype.hasInvalidtitlelengtherror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 3;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.AddTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 3));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.AddTodoErrorResponse} returns this
*/
proto.newtodo.AddTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.newtodo.AddTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.AddTodoErrorResponse} returns this
 */
proto.newtodo.AddTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.AddTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.AddTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.AddTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.AddTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.AddTodoOKResponse}
 */
proto.newtodo.AddTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.AddTodoOKResponse;
  return proto.newtodo.AddTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.AddTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.AddTodoOKResponse}
 */
proto.newtodo.AddTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.AddTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.AddTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.AddTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.AddTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.newtodo.AddTodoOKResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.newtodo.AddTodoOKResponse} returns this
 */
proto.newtodo.AddTodoOKResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.CompleteTodoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.CompleteTodoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.CompleteTodoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.CompleteTodoRequest}
 */
proto.newtodo.CompleteTodoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.CompleteTodoRequest;
  return proto.newtodo.CompleteTodoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.CompleteTodoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.CompleteTodoRequest}
 */
proto.newtodo.CompleteTodoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.CompleteTodoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.CompleteTodoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.CompleteTodoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.newtodo.CompleteTodoRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.newtodo.CompleteTodoRequest} returns this
 */
proto.newtodo.CompleteTodoRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.newtodo.CompleteTodoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.newtodo.CompleteTodoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.newtodo.CompleteTodoResponse.ResultCase}
 */
proto.newtodo.CompleteTodoResponse.prototype.getResultCase = function() {
  return /** @type {proto.newtodo.CompleteTodoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.newtodo.CompleteTodoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.CompleteTodoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.CompleteTodoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.CompleteTodoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.newtodo.CompleteTodoOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.newtodo.CompleteTodoErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.CompleteTodoResponse}
 */
proto.newtodo.CompleteTodoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.CompleteTodoResponse;
  return proto.newtodo.CompleteTodoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.CompleteTodoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.CompleteTodoResponse}
 */
proto.newtodo.CompleteTodoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newtodo.CompleteTodoOKResponse;
      reader.readMessage(value,proto.newtodo.CompleteTodoOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.newtodo.CompleteTodoErrorResponse;
      reader.readMessage(value,proto.newtodo.CompleteTodoErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.CompleteTodoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.CompleteTodoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.CompleteTodoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.newtodo.CompleteTodoOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.newtodo.CompleteTodoErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompleteTodoOKResponse ok = 1;
 * @return {?proto.newtodo.CompleteTodoOKResponse}
 */
proto.newtodo.CompleteTodoResponse.prototype.getOk = function() {
  return /** @type{?proto.newtodo.CompleteTodoOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.CompleteTodoOKResponse, 1));
};


/**
 * @param {?proto.newtodo.CompleteTodoOKResponse|undefined} value
 * @return {!proto.newtodo.CompleteTodoResponse} returns this
*/
proto.newtodo.CompleteTodoResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.newtodo.CompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.CompleteTodoResponse} returns this
 */
proto.newtodo.CompleteTodoResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.CompleteTodoResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompleteTodoErrorResponse error = 2;
 * @return {?proto.newtodo.CompleteTodoErrorResponse}
 */
proto.newtodo.CompleteTodoResponse.prototype.getError = function() {
  return /** @type{?proto.newtodo.CompleteTodoErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.CompleteTodoErrorResponse, 2));
};


/**
 * @param {?proto.newtodo.CompleteTodoErrorResponse|undefined} value
 * @return {!proto.newtodo.CompleteTodoResponse} returns this
*/
proto.newtodo.CompleteTodoResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.newtodo.CompleteTodoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.CompleteTodoResponse} returns this
 */
proto.newtodo.CompleteTodoResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.CompleteTodoResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.newtodo.CompleteTodoErrorResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.newtodo.CompleteTodoErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  TODOALREADYEXISTSERROR: 2,
  SYSTEMUNAVAILABLEERROR: 3
};

/**
 * @return {proto.newtodo.CompleteTodoErrorResponse.ErrorCase}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.newtodo.CompleteTodoErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.newtodo.CompleteTodoErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.CompleteTodoErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.CompleteTodoErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f),
    todoalreadyexistserror: (f = msg.getTodoalreadyexistserror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.CompleteTodoErrorResponse}
 */
proto.newtodo.CompleteTodoErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.CompleteTodoErrorResponse;
  return proto.newtodo.CompleteTodoErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.CompleteTodoErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.CompleteTodoErrorResponse}
 */
proto.newtodo.CompleteTodoErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setTodoalreadyexistserror(value);
      break;
    case 3:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.CompleteTodoErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.CompleteTodoErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getTodoalreadyexistserror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 1));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.CompleteTodoErrorResponse} returns this
*/
proto.newtodo.CompleteTodoErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.newtodo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.CompleteTodoErrorResponse} returns this
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse todoAlreadyExistsError = 2;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.getTodoalreadyexistserror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 2));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.CompleteTodoErrorResponse} returns this
*/
proto.newtodo.CompleteTodoErrorResponse.prototype.setTodoalreadyexistserror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.newtodo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.CompleteTodoErrorResponse} returns this
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.clearTodoalreadyexistserror = function() {
  return this.setTodoalreadyexistserror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.hasTodoalreadyexistserror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 3;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 3));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.CompleteTodoErrorResponse} returns this
*/
proto.newtodo.CompleteTodoErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.newtodo.CompleteTodoErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.CompleteTodoErrorResponse} returns this
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.CompleteTodoErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.CompleteTodoOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.CompleteTodoOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.CompleteTodoOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.CompleteTodoOKResponse}
 */
proto.newtodo.CompleteTodoOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.CompleteTodoOKResponse;
  return proto.newtodo.CompleteTodoOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.CompleteTodoOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.CompleteTodoOKResponse}
 */
proto.newtodo.CompleteTodoOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.CompleteTodoOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.CompleteTodoOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.CompleteTodoOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.CompleteTodoOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.GetAllMyTodosRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.GetAllMyTodosRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.GetAllMyTodosRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.GetAllMyTodosRequest}
 */
proto.newtodo.GetAllMyTodosRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.GetAllMyTodosRequest;
  return proto.newtodo.GetAllMyTodosRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.GetAllMyTodosRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.GetAllMyTodosRequest}
 */
proto.newtodo.GetAllMyTodosRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.GetAllMyTodosRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.GetAllMyTodosRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.GetAllMyTodosRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.newtodo.GetAllMyTodosResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.newtodo.GetAllMyTodosResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  OK: 1,
  ERROR: 2
};

/**
 * @return {proto.newtodo.GetAllMyTodosResponse.ResultCase}
 */
proto.newtodo.GetAllMyTodosResponse.prototype.getResultCase = function() {
  return /** @type {proto.newtodo.GetAllMyTodosResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.newtodo.GetAllMyTodosResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.GetAllMyTodosResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.GetAllMyTodosResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.GetAllMyTodosResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: (f = msg.getOk()) && proto.newtodo.GetAllMyTodosOKResponse.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.newtodo.GetAllMyTodosErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.GetAllMyTodosResponse}
 */
proto.newtodo.GetAllMyTodosResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.GetAllMyTodosResponse;
  return proto.newtodo.GetAllMyTodosResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.GetAllMyTodosResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.GetAllMyTodosResponse}
 */
proto.newtodo.GetAllMyTodosResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newtodo.GetAllMyTodosOKResponse;
      reader.readMessage(value,proto.newtodo.GetAllMyTodosOKResponse.deserializeBinaryFromReader);
      msg.setOk(value);
      break;
    case 2:
      var value = new proto.newtodo.GetAllMyTodosErrorResponse;
      reader.readMessage(value,proto.newtodo.GetAllMyTodosErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.GetAllMyTodosResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.GetAllMyTodosResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.GetAllMyTodosResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.newtodo.GetAllMyTodosOKResponse.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.newtodo.GetAllMyTodosErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetAllMyTodosOKResponse ok = 1;
 * @return {?proto.newtodo.GetAllMyTodosOKResponse}
 */
proto.newtodo.GetAllMyTodosResponse.prototype.getOk = function() {
  return /** @type{?proto.newtodo.GetAllMyTodosOKResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.GetAllMyTodosOKResponse, 1));
};


/**
 * @param {?proto.newtodo.GetAllMyTodosOKResponse|undefined} value
 * @return {!proto.newtodo.GetAllMyTodosResponse} returns this
*/
proto.newtodo.GetAllMyTodosResponse.prototype.setOk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.newtodo.GetAllMyTodosResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.GetAllMyTodosResponse} returns this
 */
proto.newtodo.GetAllMyTodosResponse.prototype.clearOk = function() {
  return this.setOk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.GetAllMyTodosResponse.prototype.hasOk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetAllMyTodosErrorResponse error = 2;
 * @return {?proto.newtodo.GetAllMyTodosErrorResponse}
 */
proto.newtodo.GetAllMyTodosResponse.prototype.getError = function() {
  return /** @type{?proto.newtodo.GetAllMyTodosErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.GetAllMyTodosErrorResponse, 2));
};


/**
 * @param {?proto.newtodo.GetAllMyTodosErrorResponse|undefined} value
 * @return {!proto.newtodo.GetAllMyTodosResponse} returns this
*/
proto.newtodo.GetAllMyTodosResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.newtodo.GetAllMyTodosResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.GetAllMyTodosResponse} returns this
 */
proto.newtodo.GetAllMyTodosResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.GetAllMyTodosResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.newtodo.GetAllMyTodosErrorResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.newtodo.GetAllMyTodosErrorResponse.ErrorCase = {
  ERROR_NOT_SET: 0,
  UNAUTHORIZEDERROR: 1,
  SYSTEMUNAVAILABLEERROR: 2
};

/**
 * @return {proto.newtodo.GetAllMyTodosErrorResponse.ErrorCase}
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.getErrorCase = function() {
  return /** @type {proto.newtodo.GetAllMyTodosErrorResponse.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.newtodo.GetAllMyTodosErrorResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.GetAllMyTodosErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.GetAllMyTodosErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unauthorizederror: (f = msg.getUnauthorizederror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f),
    systemunavailableerror: (f = msg.getSystemunavailableerror()) && proto.newtodo.ErrorResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.GetAllMyTodosErrorResponse}
 */
proto.newtodo.GetAllMyTodosErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.GetAllMyTodosErrorResponse;
  return proto.newtodo.GetAllMyTodosErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.GetAllMyTodosErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.GetAllMyTodosErrorResponse}
 */
proto.newtodo.GetAllMyTodosErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setUnauthorizederror(value);
      break;
    case 2:
      var value = new proto.newtodo.ErrorResponse;
      reader.readMessage(value,proto.newtodo.ErrorResponse.deserializeBinaryFromReader);
      msg.setSystemunavailableerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.GetAllMyTodosErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.GetAllMyTodosErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnauthorizederror();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getSystemunavailableerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.newtodo.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorResponse unauthorizedError = 1;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.getUnauthorizederror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 1));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.GetAllMyTodosErrorResponse} returns this
*/
proto.newtodo.GetAllMyTodosErrorResponse.prototype.setUnauthorizederror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.newtodo.GetAllMyTodosErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.GetAllMyTodosErrorResponse} returns this
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.clearUnauthorizederror = function() {
  return this.setUnauthorizederror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.hasUnauthorizederror = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResponse systemUnavailableError = 2;
 * @return {?proto.newtodo.ErrorResponse}
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.getSystemunavailableerror = function() {
  return /** @type{?proto.newtodo.ErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.newtodo.ErrorResponse, 2));
};


/**
 * @param {?proto.newtodo.ErrorResponse|undefined} value
 * @return {!proto.newtodo.GetAllMyTodosErrorResponse} returns this
*/
proto.newtodo.GetAllMyTodosErrorResponse.prototype.setSystemunavailableerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.newtodo.GetAllMyTodosErrorResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.newtodo.GetAllMyTodosErrorResponse} returns this
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.clearSystemunavailableerror = function() {
  return this.setSystemunavailableerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.newtodo.GetAllMyTodosErrorResponse.prototype.hasSystemunavailableerror = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.newtodo.GetAllMyTodosOKResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.GetAllMyTodosOKResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.GetAllMyTodosOKResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.GetAllMyTodosOKResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosOKResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    todosList: jspb.Message.toObjectList(msg.getTodosList(),
    proto.newtodo.Todo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.GetAllMyTodosOKResponse}
 */
proto.newtodo.GetAllMyTodosOKResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.GetAllMyTodosOKResponse;
  return proto.newtodo.GetAllMyTodosOKResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.GetAllMyTodosOKResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.GetAllMyTodosOKResponse}
 */
proto.newtodo.GetAllMyTodosOKResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.newtodo.Todo;
      reader.readMessage(value,proto.newtodo.Todo.deserializeBinaryFromReader);
      msg.addTodos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.GetAllMyTodosOKResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.GetAllMyTodosOKResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.GetAllMyTodosOKResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.GetAllMyTodosOKResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTodosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.newtodo.Todo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Todo todos = 1;
 * @return {!Array<!proto.newtodo.Todo>}
 */
proto.newtodo.GetAllMyTodosOKResponse.prototype.getTodosList = function() {
  return /** @type{!Array<!proto.newtodo.Todo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.newtodo.Todo, 1));
};


/**
 * @param {!Array<!proto.newtodo.Todo>} value
 * @return {!proto.newtodo.GetAllMyTodosOKResponse} returns this
*/
proto.newtodo.GetAllMyTodosOKResponse.prototype.setTodosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.newtodo.Todo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.newtodo.Todo}
 */
proto.newtodo.GetAllMyTodosOKResponse.prototype.addTodos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.newtodo.Todo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.newtodo.GetAllMyTodosOKResponse} returns this
 */
proto.newtodo.GetAllMyTodosOKResponse.prototype.clearTodosList = function() {
  return this.setTodosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.newtodo.Todo.prototype.toObject = function(opt_includeInstance) {
  return proto.newtodo.Todo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.newtodo.Todo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.Todo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    completed: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.newtodo.Todo}
 */
proto.newtodo.Todo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.newtodo.Todo;
  return proto.newtodo.Todo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.newtodo.Todo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.newtodo.Todo}
 */
proto.newtodo.Todo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.newtodo.Todo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.newtodo.Todo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.newtodo.Todo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.newtodo.Todo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.newtodo.Todo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.newtodo.Todo} returns this
 */
proto.newtodo.Todo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.newtodo.Todo.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.newtodo.Todo} returns this
 */
proto.newtodo.Todo.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool completed = 3;
 * @return {boolean}
 */
proto.newtodo.Todo.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.newtodo.Todo} returns this
 */
proto.newtodo.Todo.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.newtodo);
